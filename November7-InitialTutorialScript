t = t or 0
t = t + framedelta()

if not init then
	score = 0
	instruction = ""
end

function dist(x1,z1,x2,z2)
	return math.sqrt((x2-x1)^2 + (z2-z1)^2)	
end

function boom(i) 
	broadcast("BOOM","Position",unpack(obj[i]:getposition()))
	obj[i]:destroy()
	table.remove(obj,i)
	--score = score + dist(obj_xz[1],obj_xz[3],0,0)
end

-- j = inputs.get("ObjectNumber")
g = inputs.get("ObjectSize")
s = inputs.get("ScalingFactor")

obj = obj or {}
if not init then 
	colors = {"Green"}

		local color = colors[math.random(1, #colors)]
		table.insert(obj, object.create("Sphere",color,"White Sphere"))
		obj[1]:setposition(1.5, 0, 0)
		obj[1]:setscaling(g,g,g)

		table.insert(obj, object.create("Sphere",color,"White Sphere"))
		obj[2]:setposition(0, 0, 1.5)
		obj[2]:setscaling(g,g,g)

		table.insert(obj, object.create("Sphere",color,"White Sphere"))
		obj[3]:setposition(-1.5, 0, 0)
		obj[3]:setscaling(g,g,g)

		table.insert(obj, object.create("Sphere",color,"White Sphere"))
		obj[4]:setposition(0, 0, -1.5)
		obj[4]:setscaling(g,g,g)
	
	init = true
end

x = inputs.get("PosX")  
z = inputs.get("PosZ")

i=1
while i <= #obj do
	obj_xz = obj[i]:getposition()
	dists = dist(x,z,obj_xz[1],obj_xz[3])
   if dists < g then --  OG: 0.05, changed to g because once the CoM ball comes in contact with any part of the green spheres it explodes vs the center. 
		boom(i)
	end
i = i + 1
end

if #obj == 0 then
	stop()
end

if #obj == 4 then
	instruction = "Walk forward to dot"
	broadcast("Action", ForwardDot)
elseif #obj == 3 then
	instruction = "Walk backward to dot"
	broadcast("Action",BackwardDot)
elseif #obj == 2 then
	instruction = "Walk left to dot"
	broadcast("Action",LeftDot)
elseif #obj == 1 then
	instruction = "Walk right to dot"
	broadcast("Action",RightDot)
end
outputs.set("instruction", instruction)
print (instruction)

